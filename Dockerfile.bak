# Multi-stage build for ForeverCore GDPS
FROM node:18-alpine AS base

# Install system dependencies (Alpine uses apk)
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl \
    tzdata

# Set timezone
ENV TZ=UTC

# Create app directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN bun install --frozen-lockfile

# ===== DEVELOPMENT STAGE =====
FROM base AS development

# Install all dependencies (including dev)
RUN npm ci

# Copy source code
COPY . .

# Expose port
EXPOSE 3010

# Start development server
CMD ["npm", "run", "boot"]

# ===== BUILD STAGE =====
FROM base AS builder

# Install all dependencies for building
RUN npm ci

# Copy source code
COPY . .

# Build TypeScript (if needed)
# RUN npm run build

# ===== PRODUCTION STAGE (Node.js) =====
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    tzdata \
    dumb-init

# Set timezone
ENV TZ=UTC

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S gdps -u 1001

WORKDIR /app

# Copy package files and install production deps
COPY package*.json ./
RUN bun install --frozen-lockfile

# Copy built application
COPY --from=builder /app .

# Create directories and set permissions
RUN mkdir -p logs data/levels data/accounts GDPS_DATA config && \
    chown -R gdps:nodejs /app

USER gdps

EXPOSE 3010

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3010/ || exit 1

ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "-r", "ts-node/register", "-r", "tsconfig-paths/register", "server.ts", "--time=def", "--versionSwitcher=basic"]

# ===== PRODUCTION STAGE (Bun) =====
FROM oven/bun:1.0-alpine AS bun-production

# Installing Python
RUN apk add --no-cache \
    python3 \
    py3-pip \
    build-base \
    && ln -sf /usr/bin/python3 /usr/bin/python \
    && python --version

RUN apk add --no-cache dumb-init
# Check Python
RUN which python && python -c "import sys; print(sys.executable)"
# Install youtube-dl
RUN pip install --no-cache-dir youtube-dl
# костыль, хз почему никак не исправляется
ENV YOUTUBE_DL_SKIP_PYTHON_CHECK=1

# Set ENV
ENV PYTHON=/usr/bin/python

# Add user
RUN addgroup -S nodejs -g 1001 && \
    adduser -S gdps -u 1001 -G nodejs

# Set workdir
WORKDIR /app

# Copy packages
COPY package*.json bun.lockb* ./

# Install dependencies
RUN bun install --frozen-lockfile
RUN bun add -g tsconfig-paths

# Copy data
COPY . .

# Make dir with rules
RUN mkdir -p logs data/levels data/accounts GDPS_DATA config && \
    chown -R gdps:nodejs /app

# Switch to 'gdps' user
USER gdps

EXPOSE 3010

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3010/ || exit 1

ENTRYPOINT ["dumb-init", "--"]
CMD ["bun", "run", "-r", "tsconfig-paths/register", "server.ts", "--time=def", "--versionSwitcher=basic"]