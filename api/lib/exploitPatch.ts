"package net.fimastgd.forevercore.api.lib.exploitPatch";

/**
 * Utility class for sanitizing input to prevent exploits
 */
class ExploitPatch {
	/**
	 * Removes unsafe characters and terminates string at first delimiter
	 * @param input - Input string to sanitize
	 * @returns Sanitized string or undefined if input was undefined
	 */
	static remove(input: string | undefined): string | undefined {
		if (input === undefined) {
			return undefined;
		}

		const cleanedString = String(input);

		return cleanedString
			.replace(/\0/g, "")    // Remove null bytes
			.split("#")[0]         // Terminate at # delimiter
			.split("~")[0]         // Terminate at ~ delimiter
			.split("|")[0]         // Terminate at | delimiter
			.split(":")[0]         // Terminate at : delimiter
			.trim()                // Remove whitespace
			.split(")")[0];        // Terminate at ) delimiter
	}

	/**
	 * Keeps only alphanumeric characters and spaces
	 * @param input - Input string to sanitize
	 * @returns Sanitized string or undefined if input was undefined
	 */
	static charclean(input: string | undefined): string | undefined {
		if (input === undefined) {
			return undefined;
		}

		return input.replace(/[^A-Za-z0-9 ]/g, "");
	}

	/**
	 * Keeps only numbers, commas, and dashes
	 * @param input - Input string to sanitize
	 * @returns Sanitized string or undefined if input was undefined
	 */
	static numbercolon(input: string | undefined): string | undefined {
		if (input === undefined) {
			return undefined;
		}

		const stringS = input.toString();
		return stringS.replace(/[^0-9,-]/g, "");
	}

	/**
	 * Keeps only numbers
	 * @param input - Input string to sanitize
	 * @returns Sanitized string or undefined if input was undefined
	 */
	static number(input: string | undefined): string | undefined {
		if (input === undefined) {
			return undefined;
		}

		const cleanedString = String(input);
		return cleanedString.replace(/[^0-9]/g, "");
	}
}

export default ExploitPatch;
