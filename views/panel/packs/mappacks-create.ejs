<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
	<meta http-equiv="X-UA-Compatible" content="ie=edge" />
	<link href="<%= GDPSID %>/css/index.css" rel="stylesheet" />
	<title>Создать мап-пак| <%= GDPS %></title>
	<link rel="stylesheet" href="https://cdn.forever-gdps.host/engines/transitions.css" />
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="<%= GDPSID %>/js/render.js"></script>
	<noscript>Включите JavaScript в браузере для корректной работы сайта</noscript>
	<forcehead>
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
		<script src="https://unpkg.com/swup@4"></script>
		<script src="https://unpkg.com/@swup/scripts-plugin@2"></script>
	</forcehead>
</head>

<body>
	<%- include("../../debugWindow") %>
	<main id="swup" class="transition-main">
		    <style>
        body {
            text-align: center;
            display: block;
        }
        #add-input {
            margin-top: 10px;
        }
        .level-input {
            margin: 10px;
            width: 65px;
        }
        @media screen and (min-width: 768px) {
            .level-input_container {
                margin-left: 250px;
                margin-right: 250px;
            }
        }
        @media screen and (max-width: 767px) {
            .stars-coins-input {
                width: 55px;
            }
        }
        .input-error {
            border-color: red;
            color: red;
        }
        .input-error:focus {
            color: red !important;
            border-color: red !important;
        }
        @media screen and (max-width: 767px) {
            .input-error {
                width: 55px;
                border-color: red;
                color: red;
            }
        }
    </style> 
    <h1>Создать мап-пак</h1>
    <label>Название мап-пака</label>
    <br>
    <input name="packName" placeholder="Название пака">
    <br><br>
    <label>Уровни (ID)</label>
    <br>
    <div class="level-input_container">
        <% let lvls = ""; %>
        <% var array = lvls.split(","); %>
        <% if (array.length > 30) { array = array.slice(0, 30); } %>
        <% array.forEach(function(item, index) { %>
        <input type="number" min="1" max="4294967296" class="level-input" placeholder="Level <%= index + 1 %>" value="<%= item %>">
        <% }); %>
    <button id="add-input" style="margin-left: 15px;">+</button>
    </div>
    <!-- <button id="gather-data">Сумма</button> --> <!-- TEST -->
    <br>
    <div id="ls"></div>
    <br>
    Выберите сложность:
    <br>
    <select name="difficulty">
        <option value="-1" disabled selected>Выберите сложность</option>
        <option value="0">Auto</option>
        <option value="1">Easy</option>
        <option value="2">Normal</option>
        <option value="3">Hard</option>
        <option value="4">Harder</option>
        <option value="5">Insane</option>
        <option value="6">Demon</option>
    </select>
    <br><br>
    <label>Звёзды</label>
    <br>
    <input name="stars" class="stars-coins-input" placeholder="1 - 50" type="number" min="1" max="50" id="stars-input">
    <div id="starsErr" class="error" style="display: none;"><font color="#ff0000">Введите число от 1 до 50</font></div>
    <br><br>
    <label>Монеты</label>
    <br>
    <input name="coins" class="stars-coins-input" placeholder="1 - 10" type="number" min="1" max="10" id="coins-input">
    <div id="coinsErr" class="error" style="display: none;"><font color="#ff0000">Введите число от 1 до 10</font></div>
    <br><br>
    Цвет
    <br>
    <input type="color" value="#1166ff">
    <br><br>
    <button id="submit">Сохранить</button>
    <div id="globalError"></div>
    <br><br>
    <button id="back">Назад</button>
    <br><br><br><br><br>
    </body>

    <script>
        $(document).ready(function () {
            let inputCount = <%= array.length %>;

            $("#add-input").click(function() {
                if (inputCount < 30) {
                    inputCount++;
                    $('<input type="number" min="1" max="4294967296" class="level-input" placeholder="Level ' + inputCount + '">').insertBefore("#add-input");
                }
            });

            $("#gather-data").click(function() {
                const levels = [];
                $(".level-input").each(function() {
                    const value = $(this).val();
                    if (value) {
                        levels.push(value);
                    }
                });
                const LEVELS = levels.join(",");
                $('#ls').text(LEVELS);
            });

            $('#submit').click(function (e) {
                e.preventDefault();
                $('#submit').prop("disabled", true);
                $('#back').prop("disabled", true);
                const hexToRgb = (hex) => {
                    const bigint = parseInt(hex.slice(1), 16);
                    const r = (bigint >> 16) & 255;
                    const g = (bigint >> 8) & 255;
                    const b = bigint & 255;
                    return `${r.toString().padStart(3, '0')},${g.toString().padStart(3, '0')},${b.toString().padStart(3, '0')}`;
                };
    
                const PACKNAME = $('input[name="packName"]').val();
                const levels = [];
                $(".level-input").each(function() {
                    const value = $(this).val();
                    if (value) {
                        levels.push(value);
                    }
                });
                const LEVELS = levels.join(",");
                const DIFFICULTY = $('select[name="difficulty"]').val();
                const STARS = $('input[name="stars"]').val();
                const COINS = $('input[name="coins"]').val();
                const COLOR = hexToRgb($('input[type="color"]').val());

                async function setChanges(params) {
                    const res = await sendPost('<%= GDPSID %>/panel/packs/mappacks/create', params);
                    if (res == "1") {
                        swup.navigate('<%= GDPSID %>/panel/packs/mappacks');
                        $('#submit').prop("disabled", false);
                        $('#back').prop("disabled", false);
                        return;
                    } else {
                        $('gError').html(`<br><br><font color="#ff0000"> Ошибка ${res}</font>`);
                        $('#submit').prop("disabled", false);
                        $('#back').prop("disabled", false);
                        return;
                    }
                }

                const params = {
                    packName: PACKNAME,
                    levels: LEVELS,
                    difficulty: DIFFICULTY,
                    stars: STARS,
                    coins: COINS,
                    color: COLOR
                }
                
                const regex = /[-+\.]/;
                
                const testInt = (variable) => {
                    const result = regex.test(variable) ? false : true;
                    return result;
                };
                if (PACKNAME == "") {
                    $('#globalError').html('<br><br><font color="#ff0000">Введите название мап-пака</font>');
                    $('#submit').prop("disabled", false);
				    $('#back').prop("disabled", false);
                } else if (LEVELS == "") {
                    $('#globalError').html('<br><br><font color="#ff0000">Напишите уровни для мап-пака</font>');
                    $('#submit').prop("disabled", false);
				    $('#back').prop("disabled", false);
                } else if (DIFFICULTY == "-1") {
                    $('#globalError').html('<br><br><font color="#ff0000">Выберите сложность пака</font>');
                    $('#submit').prop("disabled", false);
				    $('#back').prop("disabled", false);
                } else if (STARS == "" || STARS < 1 || STARS > 50 || !testInt(STARS)) {
                    $('#globalError').html('<br><br><font color="#ff0000">Введите количество звёзд (от 1 до 50)</font>');
                    $('#submit').prop("disabled", false);
				    $('#back').prop("disabled", false);
                } else if (COINS == "" || COINS < 1 || COINS > 10 || !testInt(COINS)) {
                    $('#globalError').html('<br><br><font color="#ff0000">Введите количество монет (от 1 до 10)</font>');
                    $('#submit').prop("disabled", false);
				    $('#back').prop("disabled", false);
                } else {
                    setChanges(params);
                } 
            });

            $('#back').click(function (e) {
                $('#back').prop('disabled', true);
                swup.navigate('<%= GDPSID %>/panel/packs/mappacks');
                $('#back').prop('disabled', false);
            });

            // некорректные инпуты
            $("#stars-input").on("input", function() {
                const value = $(this).val();
                const number = parseInt(value, 10);
                const isValid = !isNaN(number) && number >= 1 && number <= 50;
                if (!isValid || !value) {
                    $("#starsErr").show();
                    $(this).addClass("input-error");
                    $('#submit').prop("disabled", true);
                } else {
                    $("#starsErr").hide();
                    $(this).removeClass("input-error");
                    $('#submit').prop("disabled", false);
                }
            });
            $("#coins-input").on("input", function() {
                const value = $(this).val();
                const number = parseInt(value, 10);
                const isValid = !isNaN(number) && number >= 1 && number <= 10;
                if (!isValid || !value) {
                    $("#coinsErr").show();
                    $(this).addClass("input-error");
                    $('#submit').prop("disabled", true);
                } else {
                    $("#coinsErr").hide();
                    $(this).removeClass("input-error");
                    $('#submit').prop("disabled", false);
                }
            });
        }); 
        var _0x4838c2=_0x2b6f;(function(_0x123688,_0x3ca404){var _0xe6a271=_0x2b6f,_0x5e0ec8=_0x123688();while(!![]){try{var _0x33917f=parseInt(_0xe6a271(0xa1))/0x1*(-parseInt(_0xe6a271(0x9c))/0x2)+parseInt(_0xe6a271(0x9f))/0x3*(parseInt(_0xe6a271(0x9d))/0x4)+parseInt(_0xe6a271(0xa0))/0x5+-parseInt(_0xe6a271(0xa6))/0x6+parseInt(_0xe6a271(0xa5))/0x7*(-parseInt(_0xe6a271(0xa2))/0x8)+-parseInt(_0xe6a271(0xa7))/0x9*(parseInt(_0xe6a271(0x9b))/0xa)+-parseInt(_0xe6a271(0x9a))/0xb*(-parseInt(_0xe6a271(0xa3))/0xc);if(_0x33917f===_0x3ca404)break;else _0x5e0ec8['push'](_0x5e0ec8['shift']());}catch(_0x5e7ff6){_0x5e0ec8['push'](_0x5e0ec8['shift']());}}}(_0x179e,0x93127),console[_0x4838c2(0x9e)](_0x4838c2(0xa4)));function _0x2b6f(_0x2d2ae0,_0x176962){var _0x179e46=_0x179e();return _0x2b6f=function(_0x2b6f3d,_0x30ae03){_0x2b6f3d=_0x2b6f3d-0x9a;var _0x4e514e=_0x179e46[_0x2b6f3d];return _0x4e514e;},_0x2b6f(_0x2d2ae0,_0x176962);}function _0x179e(){var _0x336ad3=['14377154bHucWH','20VbRNwy','4VPDlkN','172lUyoXB','warn','81276rOsCcb','2569465YFJFIC','50503ptGtIs','8224784rfOmLc','12hGuGHz','SwupDOM\x20loaded\x20after\x20all\x20scripts','7vwSrfN','3786336iRYKUJ','2804832yoYRqz'];_0x179e=function(){return _0x336ad3;};return _0x179e();}
    </script>
    </main>
</body>
<script>
	var swup = new Swup ({
		containers: ["#swup", "forcehead"], 
		linkSelector: 'a[soft]', 
		cache: false, 
		plugins: [
			new SwupScriptsPlugin()
		]
	});
	</script>
</html>